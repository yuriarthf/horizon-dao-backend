schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Balance {
  id: Bytes!
  tokenId: BigInt!
  amount: BigInt!
  account: RealEstateAccount!
}

input Balance_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  account_: RealEstateAccount_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Balance_filter]
  or: [Balance_filter]
}

enum Balance_orderBy {
  id
  tokenId
  amount
  account
  account__id
  account__address
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type IRO {
  id: Bytes!
  iroContractAddress: Bytes!
  iroId: BigInt!
  status: Status!
  listingOwner: Bytes!
  currencyDecimals: BigInt!
  start: BigInt!
  end: BigInt!
  currency: Bytes!
  treasuryFee: BigInt!
  operationFee: BigInt!
  targetFunding: BigInt!
  unitPrice: BigInt!
  totalFunding: BigInt!
  shares(skip: Int = 0, first: Int = 100, orderBy: UserShare_orderBy, orderDirection: OrderDirection, where: UserShare_filter): [UserShare!]
  fundsWithdrawn: Boolean!
  realEstateId: BigInt
}

type IROSet {
  id: Bytes!
  entityIds: [Bytes!]
  iroIds: [BigInt!]
}

input IROSet_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  entityIds: [Bytes!]
  entityIds_not: [Bytes!]
  entityIds_contains: [Bytes!]
  entityIds_contains_nocase: [Bytes!]
  entityIds_not_contains: [Bytes!]
  entityIds_not_contains_nocase: [Bytes!]
  iroIds: [BigInt!]
  iroIds_not: [BigInt!]
  iroIds_contains: [BigInt!]
  iroIds_contains_nocase: [BigInt!]
  iroIds_not_contains: [BigInt!]
  iroIds_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IROSet_filter]
  or: [IROSet_filter]
}

enum IROSet_orderBy {
  id
  entityIds
  iroIds
}

input IRO_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  iroContractAddress: Bytes
  iroContractAddress_not: Bytes
  iroContractAddress_gt: Bytes
  iroContractAddress_lt: Bytes
  iroContractAddress_gte: Bytes
  iroContractAddress_lte: Bytes
  iroContractAddress_in: [Bytes!]
  iroContractAddress_not_in: [Bytes!]
  iroContractAddress_contains: Bytes
  iroContractAddress_not_contains: Bytes
  iroId: BigInt
  iroId_not: BigInt
  iroId_gt: BigInt
  iroId_lt: BigInt
  iroId_gte: BigInt
  iroId_lte: BigInt
  iroId_in: [BigInt!]
  iroId_not_in: [BigInt!]
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  listingOwner: Bytes
  listingOwner_not: Bytes
  listingOwner_gt: Bytes
  listingOwner_lt: Bytes
  listingOwner_gte: Bytes
  listingOwner_lte: Bytes
  listingOwner_in: [Bytes!]
  listingOwner_not_in: [Bytes!]
  listingOwner_contains: Bytes
  listingOwner_not_contains: Bytes
  currencyDecimals: BigInt
  currencyDecimals_not: BigInt
  currencyDecimals_gt: BigInt
  currencyDecimals_lt: BigInt
  currencyDecimals_gte: BigInt
  currencyDecimals_lte: BigInt
  currencyDecimals_in: [BigInt!]
  currencyDecimals_not_in: [BigInt!]
  start: BigInt
  start_not: BigInt
  start_gt: BigInt
  start_lt: BigInt
  start_gte: BigInt
  start_lte: BigInt
  start_in: [BigInt!]
  start_not_in: [BigInt!]
  end: BigInt
  end_not: BigInt
  end_gt: BigInt
  end_lt: BigInt
  end_gte: BigInt
  end_lte: BigInt
  end_in: [BigInt!]
  end_not_in: [BigInt!]
  currency: Bytes
  currency_not: Bytes
  currency_gt: Bytes
  currency_lt: Bytes
  currency_gte: Bytes
  currency_lte: Bytes
  currency_in: [Bytes!]
  currency_not_in: [Bytes!]
  currency_contains: Bytes
  currency_not_contains: Bytes
  treasuryFee: BigInt
  treasuryFee_not: BigInt
  treasuryFee_gt: BigInt
  treasuryFee_lt: BigInt
  treasuryFee_gte: BigInt
  treasuryFee_lte: BigInt
  treasuryFee_in: [BigInt!]
  treasuryFee_not_in: [BigInt!]
  operationFee: BigInt
  operationFee_not: BigInt
  operationFee_gt: BigInt
  operationFee_lt: BigInt
  operationFee_gte: BigInt
  operationFee_lte: BigInt
  operationFee_in: [BigInt!]
  operationFee_not_in: [BigInt!]
  targetFunding: BigInt
  targetFunding_not: BigInt
  targetFunding_gt: BigInt
  targetFunding_lt: BigInt
  targetFunding_gte: BigInt
  targetFunding_lte: BigInt
  targetFunding_in: [BigInt!]
  targetFunding_not_in: [BigInt!]
  unitPrice: BigInt
  unitPrice_not: BigInt
  unitPrice_gt: BigInt
  unitPrice_lt: BigInt
  unitPrice_gte: BigInt
  unitPrice_lte: BigInt
  unitPrice_in: [BigInt!]
  unitPrice_not_in: [BigInt!]
  totalFunding: BigInt
  totalFunding_not: BigInt
  totalFunding_gt: BigInt
  totalFunding_lt: BigInt
  totalFunding_gte: BigInt
  totalFunding_lte: BigInt
  totalFunding_in: [BigInt!]
  totalFunding_not_in: [BigInt!]
  shares: [String!]
  shares_not: [String!]
  shares_contains: [String!]
  shares_contains_nocase: [String!]
  shares_not_contains: [String!]
  shares_not_contains_nocase: [String!]
  shares_: UserShare_filter
  fundsWithdrawn: Boolean
  fundsWithdrawn_not: Boolean
  fundsWithdrawn_in: [Boolean!]
  fundsWithdrawn_not_in: [Boolean!]
  realEstateId: BigInt
  realEstateId_not: BigInt
  realEstateId_gt: BigInt
  realEstateId_lt: BigInt
  realEstateId_gte: BigInt
  realEstateId_lte: BigInt
  realEstateId_in: [BigInt!]
  realEstateId_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [IRO_filter]
  or: [IRO_filter]
}

enum IRO_orderBy {
  id
  iroContractAddress
  iroId
  status
  listingOwner
  currencyDecimals
  start
  end
  currency
  treasuryFee
  operationFee
  targetFunding
  unitPrice
  totalFunding
  shares
  fundsWithdrawn
  realEstateId
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  iroset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IROSet
  irosets(
    skip: Int = 0
    first: Int = 100
    orderBy: IROSet_orderBy
    orderDirection: OrderDirection
    where: IROSet_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IROSet!]!
  userShare(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserShare
  userShares(
    skip: Int = 0
    first: Int = 100
    orderBy: UserShare_orderBy
    orderDirection: OrderDirection
    where: UserShare_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserShare!]!
  iro(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IRO
  iros(
    skip: Int = 0
    first: Int = 100
    orderBy: IRO_orderBy
    orderDirection: OrderDirection
    where: IRO_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IRO!]!
  balance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  realEstateAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RealEstateAccount
  realEstateAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: RealEstateAccount_orderBy
    orderDirection: OrderDirection
    where: RealEstateAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RealEstateAccount!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RealEstateAccount {
  id: Bytes!
  address: Bytes!
  balances(skip: Int = 0, first: Int = 100, orderBy: Balance_orderBy, orderDirection: OrderDirection, where: Balance_filter): [Balance!]
}

input RealEstateAccount_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  balances: [String!]
  balances_not: [String!]
  balances_contains: [String!]
  balances_contains_nocase: [String!]
  balances_not_contains: [String!]
  balances_not_contains_nocase: [String!]
  balances_: Balance_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RealEstateAccount_filter]
  or: [RealEstateAccount_filter]
}

enum RealEstateAccount_orderBy {
  id
  address
  balances
}

enum Status {
  PENDING
  FUNDING
  SUCCESS
  FAIL
}

type Subscription {
  iroset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IROSet
  irosets(
    skip: Int = 0
    first: Int = 100
    orderBy: IROSet_orderBy
    orderDirection: OrderDirection
    where: IROSet_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IROSet!]!
  userShare(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserShare
  userShares(
    skip: Int = 0
    first: Int = 100
    orderBy: UserShare_orderBy
    orderDirection: OrderDirection
    where: UserShare_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserShare!]!
  iro(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IRO
  iros(
    skip: Int = 0
    first: Int = 100
    orderBy: IRO_orderBy
    orderDirection: OrderDirection
    where: IRO_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IRO!]!
  balance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  realEstateAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RealEstateAccount
  realEstateAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: RealEstateAccount_orderBy
    orderDirection: OrderDirection
    where: RealEstateAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RealEstateAccount!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type UserShare {
  id: Bytes!
  address: Bytes!
  committedFunds: BigInt!
  amount: BigInt!
  share: BigDecimal!
  claimed: Boolean!
  iro: IRO!
}

input UserShare_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  committedFunds: BigInt
  committedFunds_not: BigInt
  committedFunds_gt: BigInt
  committedFunds_lt: BigInt
  committedFunds_gte: BigInt
  committedFunds_lte: BigInt
  committedFunds_in: [BigInt!]
  committedFunds_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  share: BigDecimal
  share_not: BigDecimal
  share_gt: BigDecimal
  share_lt: BigDecimal
  share_gte: BigDecimal
  share_lte: BigDecimal
  share_in: [BigDecimal!]
  share_not_in: [BigDecimal!]
  claimed: Boolean
  claimed_not: Boolean
  claimed_in: [Boolean!]
  claimed_not_in: [Boolean!]
  iro_: IRO_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserShare_filter]
  or: [UserShare_filter]
}

enum UserShare_orderBy {
  id
  address
  committedFunds
  amount
  share
  claimed
  iro
  iro__id
  iro__iroContractAddress
  iro__iroId
  iro__status
  iro__listingOwner
  iro__currencyDecimals
  iro__start
  iro__end
  iro__currency
  iro__treasuryFee
  iro__operationFee
  iro__targetFunding
  iro__unitPrice
  iro__totalFunding
  iro__fundsWithdrawn
  iro__realEstateId
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}